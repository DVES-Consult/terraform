name: merge main

on:
  workflow_call:

jobs:
  test:
    runs-on: ubuntu-latest
    outputs: 
      test_status: ${{ job.status }}
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:  
              - 'aws-rds/backend/**'
            frontend:
              - 'aws-rds/frontend/**'

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Install dependencies and run test backend
        if: steps.filter.outputs.backend == 'true'
        run: npm ci && npm test
        working-directory: ./aws-rds/backend
      
      - name: Install dependencies and run test frontend
        if: steps.filter.outputs.frontend == 'true'
        run: npm ci && npm test
        working-directory: ./aws-rds/frontend/front

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    outputs: 
      build_status: ${{ job.status }}
    continue-on-error: true
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:  
              - 'aws-rds/backend/**'
            frontend:
              - 'aws-rds/frontend/**'

      - name: login docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set short SHA
        id: set_short_sha
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build Docker image backend
        if: steps.filter.outputs.backend == 'true'
        run: |
          docker build --tag dves_api:latest aws-rds/backend/
          docker tag dves_api:latest henriquelr/dves_api:latest 
          docker tag dves_api:latest henriquelr/dves_api:${{ env.SHORT_SHA }} 

      - name: Build Docker image frontend
        if: steps.filter.outputs.frontend == 'true'
        run: |
          docker build --tag meu-site-nginx:latest aws-rds/frontend/
          docker tag meu-site-nginx:latest henriquelr/meu-site-nginx:latest 
          docker tag meu-site-nginx:latest henriquelr/meu-site-nginx:${{ env.SHORT_SHA }} 

      - name: Push Docker image backend
        if: steps.filter.outputs.backend == 'true'
        run: |
          docker push henriquelr/dves_api:latest
          docker push henriquelr/dves_api:${{ env.SHORT_SHA }}
      
      - name: Push Docker image frontend
        if: steps.filter.outputs.frontend == 'true'
        run: |
          docker push henriquelr/meu-site-nginx:latest
          docker push henriquelr/meu-site-nginx:${{ env.SHORT_SHA }}
  
  deploy-aws:
    needs: [test, docker-build]
    outputs: 
      deploy_status: ${{ job.status }}
    continue-on-error: true
    if: ${{ needs.docker-build.outputs.build_status == 'success' && needs.test.outputs.test_status == 'success' }}
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:  
              - 'aws-rds/backend/**'
            frontend:
              - 'aws-rds/frontend/**'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Create launch template version and start instance refresh frontend
        if: steps.filter.outputs.frontend == 'true'
        run: |
          echo "Getting user data"
          user_data=$(cat aws-rds/infrastructure/scripts-front.sh | base64 -w 0)
          echo "Creating launch template version"
          aws ec2 create-launch-template-version --launch-template-id lt-025e6a5928fe67c29 \
            --source-version 1 --launch-template-data "UserData=${user_data}"  &> /dev/null 
          echo "Starting instance update"
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name site-web1

      - name: Create launch template version and start instance refresh backend
        if: steps.filter.outputs.backend == 'true'
        run: |
          echo "Getting user data"
          user_data=$(cat aws-rds/infrastructure/scripts-back.sh | base64 -w 0)
          echo "Creating launch template version"
          aws ec2 create-launch-template-version --launch-template-id lt-0b3cbaaa5a6fe3ba1 \
            --source-version 1 --launch-template-data "UserData=${user_data}"  &> /dev/null 
          echo "Starting instance update"
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name api-enviar-email

  slack-message:
    needs: [test, docker-build, deploy-aws] 
    runs-on: ubuntu-latest
    steps: 
      - name: Getting status jobs
        if: ${{ needs.docker-build.outputs.build_status == 'failure' || needs.test.outputs.test_status == 'failure' || needs.deploy-aws.outputs.deploy_status == 'failure' }} 
        run: |
          echo "JOBS_STATUS=failure" >> $GITHUB_ENV
          echo "COLOR=FF0000" >> $GITHUB_ENV
      
      - name: Getting status jobs
        if: ${{ needs.docker-build.outputs.build_status == 'success' && needs.test.outputs.test_status == 'success' && needs.deploy-aws.outputs.deploy_status == 'success' }}
        run: |
          echo "JOBS_STATUS=success" >> $GITHUB_ENV
          echo "COLOR=28a745" >> $GITHUB_ENV

      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_PR_CHANNEL_ID }}
          payload: |
            {
              "text": "GitHub Action result: ${{ env.JOBS_STATUS }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "attachments": [
                {
                  "color": "${{ env.COLOR }}",
                  "fields": [
                    {
                      "title": "Test result",
                      "short": true,
                      "value": "${{ needs.test.outputs.test_status }}"
                    },
                    {
                      "title": "Build and Push result",
                      "short": true,
                      "value": "${{ needs.docker-build.outputs.build_status }}"
                    },
                    {
                      "title": "deploy result",
                      "short": true,
                      "value": "${{ needs.deploy-aws.outputs.deploy_status }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

